cmake_minimum_required(VERSION 3.0)
project(hardware_module)

set(VERSION 0.1)
set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

if(LED_HAL_PWM)
	ADD_DEFINITIONS(-DLED_HAL_PWM)
elseif(LED_HAL_I2C)
	ADD_DEFINITIONS(-DLED_HAL_I2C)
elseif(LED_HAL_YODASTAGE)
	ADD_DEFINITIONS(-DLED_HAL_YODASTAGE)
else()
	ADD_DEFINITIONS(-DLED_HAL_VSP)
endif()

if(LED_HAL_GPIO)
	ADD_DEFINITIONS(-DLED_HAL_GPIO)
endif()

ADD_DEFINITIONS(-DLED_NUMS=${BOARD_LED_NUMS})
MESSAGE("LED_NUMS = ${BOARD_LED_NUMS}")

if(MIC_ARRAY_HAL_PCM)
	ADD_DEFINITIONS(-DMIC_ARRAY_HAL_PCM)
	ADD_DEFINITIONS(-DROKIDOS_BOARDCONFIG_SOUND_CARDID=${ROKIDOS_BOARDCONFIG_SOUND_CARDID})
	MESSAGE("ROKIDOS_BOARDCONFIG_SOUND_CARDID = ${ROKIDOS_BOARDCONFIG_SOUND_CARDID}")
	ADD_DEFINITIONS(-DROKIDOS_BOARDCONFIG_CAPTURE_DEVICEID=${ROKIDOS_BOARDCONFIG_CAPTURE_DEVICEID})
	MESSAGE("ROKIDOS_BOARDCONFIG_CAPTURE_DEVICEID = ${ROKIDOS_BOARDCONFIG_CAPTURE_DEVICEID}")


else()
	ADD_DEFINITIONS(-DMIC_ARRAY_HAL_VSP)
	ADD_DEFINITIONS(-DENABLE_DSP_ALL_EXT)
endif()

if(KENOBI_MODE)
	ADD_DEFINITIONS(-DKENOBI_MODE)
	MESSAGE("using 8009b kenobi mode")
endif()

ADD_DEFINITIONS(-DMIC_CHANNEL=${BOARD_MIC_CHANNEL})
MESSAGE("MIC_CHANNEL = ${BOARD_MIC_CHANNEL}")
ADD_DEFINITIONS(-DMIC_SAMPLE_RATE=${BOARD_MIC_SAMPLE_RATE})
MESSAGE("MIC_SAMPLE_RATE = ${BOARD_MIC_SAMPLE_RATE}")
ADD_DEFINITIONS(-DMIC_BIT_FORMAT=${BOARD_MIC_BIT_FORMAT})
MESSAGE("MIC_BIT_FORMAT = ${BOARD_MIC_BIT_FORMAT}")

if(MODEM_HAL_TTY)
  ADD_DEFINITIONS(-DMODEM_HAL_TTY)
  ADD_DEFINITIONS(-DMODEM_TTY_DEV=\"${BOARD_MODEM_TTY_DEV}\") 
  MESSAGE("MODEM_TTY_DEV = \"${BOARD_MODEM_TTY_DEV}\"")
  ADD_DEFINITIONS(-DMODEM_TTY_BAUD=${BOARD_MODEM_TTY_BAUD}) 
  MESSAGE("MODEM_TTY_BAUD = ${BOARD_MODEM_TTY_BAUD}")

  if(BOARD_MODEM_TTY_DEBUG)
    ADD_DEFINITIONS(-DMODEM_TTY_DEBUG) 
  endif()
endif()

include(GNUInstallDirs)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${COMMON_FLAGS} -DBOARD_ROKID_PLAYBACK_DEVICEID=${BOARD_ROKID_PLAYBACK_DEVICEID}")
find_package(AndroidCUtils REQUIRED)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/libhardware/include)
add_subdirectory(libhardware)
add_subdirectory(modules)
