include $(TOPDIR)/rules.mk

PKG_NAME:=shadow-node
PKG_VERSION:=
PKG_RELEASE:=1
PKG_SOURCE_DIR:=$(ROKID_DIR)/frameworks/vm/shadow-node
PKG_FIXUP:=libtool
PKG_BUILD_PARALLEL:=1
PKG_LICENSE:=GPL-2.0+

include $(INCLUDE_DIR)/package.mk
include cmake.mk

SHADOW_NODE_SOURCE:=$(BUILD_DIR)/shadow-node
SHADOW_NODE_TOOLCHAIN_BIN:=$(TOOLCHAIN_DIR)/bin
SHADOW_NODE_TARGET_ARCH:=$(shell echo ${CONFIG_ARCH})
SHADOW_NODE_TARGET_BOARD:=$(shell echo ${CONFIG_TARGET_BOARD})
SHADOW_NODE_CONFIGS:=$(shell pwd)/configs

CMAKE_OPTIONS += -B$(SHADOW_NODE_SOURCE)/out
CMAKE_OPTIONS += -H$(SHADOW_NODE_SOURCE)
CMAKE_OPTIONS += -DTARGET_ARCH=$(CONFIG_ARCH)


ifeq ($(CONFIG_TARGET_amlogic_a113), y)
  PLATFORM_DESCRIPTOR := aarch64-linux
  CMAKE_OPTIONS += -DCMAKE_EXTERNAL_SYSROOT=$(TOOLCHAIN_ROOT_DIR)/$(CONFIG_TARGET_NAME)/libc/
  TOOLCHAIN_FILE := $(SHADOW_NODE_SOURCE)/cmake/config/$(PLATFORM_DESCRIPTOR).cmake
else ifeq ($(CONFIG_TARGET_brcm2708), y)
  PLATFORM_DESCRIPTOR := aarch64-openwrt-linux
  CMAKE_OPTIONS += -DCMAKE_EXTERNAL_SYSROOT='$(STAGING_DIR)'
  TOOLCHAIN_FILE := $(SHADOW_NODE_SOURCE)/cmake/config/$(PLATFORM_DESCRIPTOR).cmake
else ifeq ($(CONFIG_TARGET_leo), y)
  PLATFORM_DESCRIPTOR := arm-openwrt-linux
  CMAKE_OPTIONS += -DCMAKE_EXTERNAL_SYSROOT='$(STAGING_DIR)'
  TOOLCHAIN_FILE := $(SHADOW_NODE_SOURCE)/cmake/config/$(PLATFORM_DESCRIPTOR).cmake
else ifeq ($(CONFIG_TARGET_rockchip_rk3308), y)
  PLATFORM_DESCRIPTOR := aarch64-linux
  CMAKE_OPTIONS += -DCMAKE_EXTERNAL_SYSROOT=$(TOOLCHAIN_ROOT_DIR)/$(CONFIG_TARGET_NAME)/libc/
  TOOLCHAIN_FILE := $(SHADOW_NODE_SOURCE)/cmake/config/$(PLATFORM_DESCRIPTOR).cmake
else ifeq ($(CONFIG_TARGET_quanzhi), y)
  PLATFORM_DESCRIPTOR := arm-openwrt-linux
  SHADOW_NODE_TOOLCHAIN_BIN:=$(TOOLCHAIN_ROOT_DIR)/bin
  CMAKE_OPTIONS += -DCMAKE_EXTERNAL_SYSROOT='$(TOOLCHAIN_ROOT_DIR)/lib/'
  TOOLCHAIN_FILE := $(SHADOW_NODE_CONFIGS)/$(CONFIG_TOOLCHAIN_LIBC)/arm-quanzhi-linux.cmake
else ifeq ($(CONFIG_TARGET_x86_64), y)
  PLATFORM_DESCRIPTOR := x86_64-linux
  CMAKE_OPTIONS += -DCMAKE_EXTERNAL_SYSROOT='$(TOOLCHAIN_ROOT_DIR)'
  TOOLCHAIN_FILE := $(SHADOW_NODE_SOURCE)/cmake/config/$(PLATFORM_DESCRIPTOR).cmake
else ifeq ($(CONFIG_TARGET_a113l_a113l), y)
  PLATFORM_DESCRIPTOR := arm-openwrt-linux
  #SHADOW_NODE_TOOLCHAIN_BIN:=$(TOOLCHAIN_ROOT_DIR)/bin
  CMAKE_OPTIONS += -DCMAKE_EXTERNAL_SYSROOT='$(TOOLCHAIN_ROOT_DIR)/armv8l-linux-gnueabihf/libc'
  TOOLCHAIN_FILE := $(SHADOW_NODE_CONFIGS)/$(CONFIG_TOOLCHAIN_LIBC)/armv8l-linux.cmake
else
  PLATFORM_DESCRIPTOR := $(SHADOW_NODE_TARGET_ARCH)-linux
  CMAKE_OPTIONS += -DCMAKE_EXTERNAL_SYSROOT='$(TOOLCHAIN_SYSROOT)'
  TOOLCHAIN_FILE := $(SHADOW_NODE_CONFIGS)/$(SHADOW_NODE_TARGET_ARCH)-$(SHADOW_NODE_TARGET_BOARD).cmake
endif

CMAKE_OPTIONS += -DCMAKE_TOOLCHAIN_FILE=$(TOOLCHAIN_FILE)
CMAKE_OPTIONS += -DPLATFORM_DESCRIPTOR=$(PLATFORM_DESCRIPTOR)
CMAKE_OPTIONS += -DCMAKE_TOOLCHAIN_ROOT=$(SHADOW_NODE_TOOLCHAIN_BIN)
CMAKE_OPTIONS += -DFEATURE_DEBUGGER=OFF
CMAKE_OPTIONS += -DCMAKE_BUILD_TYPE=Release
CMAKE_OPTIONS += -DTARGET_OS=linux
CMAKE_OPTIONS += -DTARGET_BOARD=$(SHADOW_NODE_TARGET_BOARD)
CMAKE_OPTIONS += -DENABLE_LTO=OFF
CMAKE_OPTIONS += -DENABLE_SNAPSHOT=ON
CMAKE_OPTIONS += -DENABLE_NAPI=ON
CMAKE_OPTIONS += -DENABLE_JERRYX=ON
CMAKE_OPTIONS += -DBUILD_LIB_ONLY=OFF
CMAKE_OPTIONS += -DFEATURE_MEM_STATS=OFF
CMAKE_OPTIONS += -DFEATURE_HEAP_PROFILER=ON
CMAKE_OPTIONS += -DFEATURE_CPU_PROFILER=ON
CMAKE_OPTIONS += -DFEATURE_PROFILE='$(SHADOW_NODE_SOURCE)/deps/jerry/jerry-core/profiles/es5.1.profile'
CMAKE_OPTIONS += -DEXTERNAL_MODULES=''
CMAKE_OPTIONS += -DMEM_HEAP_SIZE_KB=2048
CMAKE_OPTIONS += -DEXTERNAL_LIBS=''
CMAKE_OPTIONS += -DEXTERNAL_COMPILE_FLAGS=''
CMAKE_OPTIONS += -DEXTERNAL_LINKER_FLAGS=''
CMAKE_OPTIONS += -DEXTERNAL_INCLUDE_DIR=''
CMAKE_OPTIONS += -DINSTALL_PREFIX='/usr'

MAKE_FLAGS += -C $(SHADOW_NODE_SOURCE)/out

define Package/shadow-node
  SECTION:=libs
  CATEGORY:=rokid
  TITLE:=shadow-node
  DEPENDS:=+libstdcpp +dbus +zlib +librt
endef

define Build/Prepare
	$(CP) $(PKG_SOURCE_DIR)/* $(PKG_BUILD_DIR)
	$(RM) $(PKG_BUILD_DIR)/deps/jerry/jerry-core/include/jerryscript-snapshot.h.rej
	$(RM) $(PKG_BUILD_DIR)/deps/jerry/tests/unit-core/test-snapshot.c.rej
	$(call Build/Prepare/Default,)
endef

define Build/InstallDev
	$(INSTALL_DIR) $(1)/usr/include
	$(CP) $(PKG_INSTALL_DIR)/usr/include/* $(1)/usr/include/

	$(INSTALL_DIR) $(1)/usr/lib
	$(CP) $(PKG_INSTALL_DIR)/usr/lib/*.so* $(1)/usr/lib/
endef

define Package/shadow-node/install
	$(INSTALL_DIR) $(1)/usr/lib
	$(CP) $(PKG_INSTALL_DIR)/usr/lib/lib*.so* $(1)/usr/lib/
	$(INSTALL_DIR) $(1)/usr/bin
	$(CP) $(PKG_INSTALL_DIR)/usr/bin/* $(1)/usr/bin
	$(CP) $(PKG_INSTALL_DIR)/usr/bin/iotjs $(1)/usr/bin/node
endef

$(eval $(call BuildPackage,shadow-node))

