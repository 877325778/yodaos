# SWUpdate configuration file
#
# This is responsible to pass configuration and parameters
# to SWUpdate. Most of configuration can be overwritten
# with command line parameters.
#

# globals : general configuration for the installer
#
# verbose 
#   Default Value: false
#
# loglevel 		: integer
#			  level for logging from 1 (no log) to 6
# syslog 		: boolean
#	 		  enable sending logs to syslog daemon
# public-key-file	: string
#			  file with public key for
#			  image verification 
# mtd-blacklist		: list integers
#			  MTD devices where SWUpdate
#			  must not try to check for UBI filesystem.
# aes-key-file		: string
#			  file containing the symmetric key for
#			  image decryption
# postupdatecmd		: string
#			  command to be executed after a successful update
globals :
{

	verbose = true;
	loglevel = 5;
	syslog = true;
	/* public-key-file = "test.pem";*/
	mtd-blacklist = "0 1 2 3 4 5 6";

};

#
# download : setup for the downloader
#            It requires that SWUpdate is started with -d
#
# url			: string
#			  complete URL pointing to the SWU image of the update package
# retries		: integer
#			  Number of retries (0=forever)
# timeout		: integer
#			  it is the number of seconds that can be accepted without
#			  receiving any packets. If it elapses, the connection is
#			  considered broken.
download :
{
	retries = 3;
	timeout = 1800;
	url = "http://example.com/software.swu";
};

#
# versions : list of installed artifacts
# they are used when installed-if-differently is set
versions : (
	{
		name = "uboot";
		version = "2016.03";
	},
	{
		name = "kernel";
		version = "4.4";
	}
);

#
# identify section : it is just used to inform a backend about the running target
# any entry is a copule of <key, vealue>. For example, MAC address, serial number,
# and so on.
identify : (
	{ name = "versionSpC"; value = "1.0"; },
	{ name = "hwId"; value = "ipse"; },
	{ name = "hwVersion"; value = "333"; },
	{ name = "serialNo"; value = "1234567890"; },
	{ name = "swCompatibility"; value = "unknown";}
);

# 
# suricatta section: setup for backend
#
# Currently, they refer to the Hawkbit agent.
#
# tenant		: string
#			  Hawkbit tenant
# id			: string
#			  target identifier
# url			: string
#			  URL of the Hawkbit server
# polldelay		: integer
#			  polling cycle (seconds)
# retry			: integer
#			  number of retries to connect to server
# retrywait		: integer
# sslkey		: string
#			  path the the file containing the key for ssl connection
# sslcert		: string
#			  path the the file containing the certificate for SSL connection
# proxy			: string
#			  in case the server is reached via a proxy

suricatta :
{

	tenant		= "default";
	id		= "123456";
	confirm 	= 0;
	url 		= "http://papero.fritz.box:8080";
	polldelay	= 20;
	nocheckcert	= true;
	retry		= 4;
	retrywait	= 200;
	loglevel	= 10;
	userid		= 1000;
	groupid		= 1000;
/*
	cafile		= "/etc/ssl/cafile";
	sslkey		= "/etc/ssl/sslkey";
	sslcert		= "/etc/ssl/sslcert";
*/
};

#
# webserver : setup for the embedded webserver
# see ./swupdate -h for details

webserver :
{
	document_root = "./www";
	userid		= 1000;
	groupid		= 1000;
};
