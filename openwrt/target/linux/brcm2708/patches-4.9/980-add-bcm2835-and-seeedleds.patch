diff -Nuar linux-4.9.137-old/arch/arm/boot/dts/bcm2710.dtsi linux-4.9.137-new/arch/arm/boot/dts/bcm2710.dtsi
--- linux-4.9.137-old/arch/arm/boot/dts/bcm2710.dtsi	2018-12-17 14:18:56.066097963 +0800
+++ linux-4.9.137-new/arch/arm/boot/dts/bcm2710.dtsi	2018-12-17 14:20:30.398099690 +0800
@@ -6,6 +6,48 @@
 	compatible = "brcm,bcm2837", "brcm,bcm2836";
 	model = "BCM2837";
 
+     led-stage{
+		compatible = "rokid, led-stage";
+		led_num = <36>;		      //12(led)*3(RGB)
+		status = "okay";
+
+		enable_init_light = <0>;   //0:disable,1:enable init_pattern,2:enable init_raw_data
+	#if 1
+		init_pattern_type = <1>;
+		init_pattern_inter_timems = <30>;
+	#else
+		init_raw_data_length = <72>;   //36*2
+		init_raw_data_inter_timems = <300>;
+		init_raw_data_u8 = /bits/ 8
+			<0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0
+			 0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0
+			 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF
+			 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF>;
+		//raw_data explain:
+		//t0:led1b led1g led1r led2b led2g ...
+		//t1:led1b led1g ...
+		//..
+	#endif
+
+		enable_ota_light = <0>;
+		//0:disable,1:enable init_pattern,2:enable init_raw_data
+	#if 0
+		ota_pattern_type = <1>;
+		ota_pattern_inter_timems = <30>;
+	#else
+		ota_raw_data_length = <72>;   //36*2
+		ota_raw_data_inter_timems = <300>;
+		ota_raw_data_u8 = /bits/ 8
+			<0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0
+			 0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0
+			 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF 0x0  0x0  0xFF
+			 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF>;
+		//raw_data explain:
+		//t0:led1b led1g led1r led2b led2g ...
+		//t1:led1b led1g ...
+		//..
+	#endif
+	};
 	soc {
 		ranges = <0x7e000000 0x3f000000 0x01000000>,
 		         <0x40000000 0x40000000 0x00040000>;
diff -Nuar linux-4.9.137-old/arch/arm/boot/dts/bcm2710-rpi-3-b-plus.dts linux-4.9.137-new/arch/arm/boot/dts/bcm2710-rpi-3-b-plus.dts
--- linux-4.9.137-old/arch/arm/boot/dts/bcm2710-rpi-3-b-plus.dts	2018-12-17 14:18:56.094097964 +0800
+++ linux-4.9.137-new/arch/arm/boot/dts/bcm2710-rpi-3-b-plus.dts	2018-12-17 14:23:05.470102528 +0800
@@ -115,14 +115,15 @@
       pinctrl-names = "default";
       pinctrl-0 = <&spi0_pins &spi0_cs_pins>;
       cs-gpios = <&gpio 8 1>, <&gpio 7 1>;
-
+/*
       spidev0: spidev@0{
               compatible = "spidev";
-              reg = <0>;      /* CE0 */
+              reg = <0>;      
               #address-cells = <1>;
               #size-cells = <0>;
               spi-max-frequency = <125000000>;
       };
+*/
 
       spidev1: spidev@1{
               compatible = "spidev";
diff -Nuar linux-4.9.137-old/arch/arm/boot/dts/bcm283x.dtsi linux-4.9.137-new/arch/arm/boot/dts/bcm283x.dtsi
--- linux-4.9.137-old/arch/arm/boot/dts/bcm283x.dtsi	2018-12-17 14:18:56.090097964 +0800
+++ linux-4.9.137-new/arch/arm/boot/dts/bcm283x.dtsi	2018-12-17 14:21:14.698100500 +0800
@@ -373,7 +373,8 @@
 			clocks = <&clocks BCM2835_CLOCK_VPU>;
 			#address-cells = <1>;
 			#size-cells = <0>;
-			status = "disabled";
+			/*status = "disabled"; */
+			status = "okay";
 			cs-gpios = <&gpio 8 1>, <&gpio 7 1>;
 		};
 

diff -Nuar linux-4.9.137-old/drivers/leds/Kconfig linux-4.9.137-new/drivers/leds/Kconfig
--- linux-4.9.137-old/drivers/leds/Kconfig	2018-12-17 14:18:54.790097940 +0800
+++ linux-4.9.137-new/drivers/leds/Kconfig	2018-12-17 14:23:43.534103224 +0800
@@ -100,6 +100,14 @@
 	  converter plus 1.5A constant current driver for a high-current
 	  white LED.
 
+config LEDS_APA102
+	tristate "LED support for APA102 Chip"
+	depends on LIGHT_EFFECT
+	depends on SPI
+	default n
+	help
+	  This option enables support for LEDs connected to apa102
+
 
 config LEDS_LOCOMO
 	tristate "LED Support for Locomo device"
diff -Nuar linux-4.9.137-old/drivers/leds/leds-apa102.c linux-4.9.137-new/drivers/leds/leds-apa102.c
--- linux-4.9.137-old/drivers/leds/leds-apa102.c	1970-01-01 08:00:00.000000000 +0800
+++ linux-4.9.137-new/drivers/leds/leds-apa102.c	2018-12-17 14:24:20.646103903 +0800
@@ -0,0 +1,295 @@
+/*
+ * leds-apa102.c  led module
+ *
+ * Version: 1.0.0
+ *
+ *  Author: SHANJIA MING <jiaming.shan@rokid.com>
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+#include <linux/errno.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/kthread.h>		
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/sched.h>
+#include <linux/spi/spi.h>
+#include <linux/types.h>
+#include <linux/version.h>
+
+#include <linux/of_gpio.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/firmware.h>
+#include <linux/slab.h>
+#include <linux/version.h>
+#include <linux/input.h>
+#include <linux/interrupt.h>
+#include <linux/debugfs.h>
+#include <linux/miscdevice.h>
+#include <asm/uaccess.h>
+#include <linux/leds.h>
+#include <linux/workqueue.h>
+#include <linux/light_effect.h>
+
+#define APASPI_MODNAME "apaspi"
+#define APASPI_VERSION "1.0.0"
+
+
+#define  BRIGHT(x)     (0xE0 | (x))
+#define  APA_LED_NUMS   (12)
+
+#define APASPI_BUS_ID 0
+//.#define APASPI_BUS_MODE (SPI_CPOL | SPI_CPHA)
+#define APASPI_BUS_MODE 0 
+#define APASPI_CS_ID 0 
+#define POWER  5
+
+struct apa102
+{
+  struct spi_board_info *spi_board;
+  struct spi_device *spi_device;
+  struct spi_master *spi_master;
+  struct work_struct pixel_work;
+  int enable_light_effect;
+};
+
+#define APASPI_CLK_SPEED 2000000
+static uint8_t pkts[(APA_LED_NUMS+2)*4];
+static uint8_t pixels[APA_LED_NUMS*3];
+
+static struct apa102 mApa;
+static int apaspi_clkspeed = APASPI_CLK_SPEED;		
+module_param(apaspi_clkspeed, int, 0);
+MODULE_PARM_DESC(apaspi_clkspeed, "SPI bus clock speed (Hz)");
+
+static int apa_bright = 31;		
+module_param(apa_bright, int, 0);
+MODULE_PARM_DESC(apaspi_bright, "apaspi bright");
+
+static struct spi_board_info apa_spi_board_info __initdata = {
+	.modalias = APASPI_MODNAME,
+	.max_speed_hz = 5000000,
+	.bus_num = APASPI_BUS_ID,
+	.chip_select = APASPI_CS_ID,
+	.mode = APASPI_BUS_MODE
+};
+
+uint32_t apaspi_write_bytes(struct apa102 *apa102, uint8_t *src, uint32_t len)
+{
+	struct spi_message msg;
+	struct spi_transfer transfer[1];
+
+	memset(&transfer, 0, sizeof(transfer));
+	spi_message_init(&msg);
+
+	transfer[0].tx_buf = src;
+	transfer[0].len = len;
+
+	spi_message_add_tail(&transfer[0], &msg);
+	spi_sync(apa102->spi_device, &msg);
+
+	if (msg.actual_length != len) 
+        {
+                printk("msg.actual_length:%d,len:%d\n",msg.actual_length,len);
+		return 0;
+	}
+
+	return len;
+}
+
+int dump(uint8_t *buf,int len)
+{
+  int i;
+
+  printk("******************************************\n");
+  printk("dump %d bytes\n",len);
+  printk("******************************************\n");
+
+  for(i=0;i<len;i++)
+  {
+     printk("%x ",buf[i]);
+
+    if((i+1)%12 == 0)
+      printk("\n");
+  }
+  printk("\n");
+
+  printk("******************************************\n");
+  return 0;
+}
+
+int apa_led_send(struct apa102 *apa102,uint8_t *src,uint32_t len)
+{
+     int i;
+     uint8_t* dst = pkts;  
+   
+     *dst++=0;
+     *dst++=0;
+     *dst++=0;
+     *dst++=0;
+
+     for(i=0;i<APA_LED_NUMS;i++)
+     {
+       *dst++ = BRIGHT(apa_bright);
+       *dst++ = src[i*3+2];
+       *dst++ = src[i*3+1];
+       *dst++ = src[i*3+0]; 
+     }
+
+     *dst++ = 0xff;
+     *dst++ = 0xff;
+     *dst++ = 0xff;
+     *dst = 0xff;
+
+//     dump(src,len);
+//     dump(pkts,APA_LED_NUMS*4+8);
+     
+     return apaspi_write_bytes(apa102,pkts,APA_LED_NUMS*4+8);
+}
+
+int apa_init_led(void)
+{
+
+     int i;
+     uint8_t* dst = pkts;  
+   
+     *dst++=0;
+     *dst++=0;
+     *dst++=0;
+     *dst++=0;
+
+     for(i=0;i<APA_LED_NUMS;i++)
+     {
+       *dst++ = BRIGHT(apa_bright);
+       *dst++ = 0;
+       *dst++ = 0;
+       *dst++ = 0; 
+     }
+
+     *dst++ = 0xff;
+     *dst++ = 0xff;
+     *dst++ = 0xff;
+     *dst = 0xff;
+
+//     dump(src,len);
+//     dump(pkts,APA_LED_NUMS*4+8);
+     
+     return apaspi_write_bytes(&mApa,pkts,APA_LED_NUMS*4+8);
+
+}
+
+static void apa102_pixel_work(struct work_struct *work)
+{
+    struct apa102 *apa102 = container_of(work, struct apa102,pixel_work);
+
+    apa_led_send(apa102,pixels,sizeof(pixels));
+}
+
+static int extern_apa102_pixel_store(char *buf, int count)
+{
+    struct apa102 *apa102 = &mApa;
+
+    if(!(apa102->enable_light_effect))
+    {
+        return 0;
+    }
+
+    if(count < sizeof(pixels))
+    {
+        printk("apa102_led_draw ERR buf, count=%d, buf=%s\n", count, buf);
+        return count;
+    }
+
+    cancel_work_sync(&apa102->pixel_work);
+    memcpy(pixels,buf,sizeof(pixels));
+    schedule_work(&apa102->pixel_work);
+
+    return count;
+}
+
+static int extern_led_busy_show(void)
+{
+    struct apa102 *apa102 = &mApa;
+
+    int ret = (work_busy(&apa102->pixel_work)) ? 1 : 0;
+    return ret;
+}
+
+static int __init apaspi_led_init(void) 
+{
+	struct spi_master *spi_master = NULL;
+	struct spi_device *spi_device = NULL;
+	struct apa102 *apa102 = &mApa;
+
+	printk(KERN_INFO "apaspi : version %s\n", APASPI_VERSION);
+	spi_master = spi_busnum_to_master(APASPI_BUS_ID);
+
+	if (!spi_master) 
+        {
+		printk(KERN_ERR "apaspi: Unable to locate SPI master device on bus %d\n", APASPI_BUS_ID);
+		return -ENOMEM;
+	}
+
+	printk(KERN_INFO "apaspi: SPI bus master retrieve from bus number %d\n", APASPI_BUS_ID);
+
+	spi_device = spi_new_device(spi_master, &apa_spi_board_info);
+
+	if (!spi_device) 
+        {
+		printk(KERN_ERR "apaspi: Unable to create new SPI device on bus %d\n", APASPI_BUS_ID);
+		return -ENODEV;
+	}
+
+	spi_device->max_speed_hz = apaspi_clkspeed;
+
+	if (spi_setup(spi_device) < 0) 
+        {
+		kfree(spi_device);
+		printk(KERN_ERR "apaspi: Unable to setup SPI bus %d\n",APASPI_BUS_ID);
+		return -EFAULT;
+	}
+
+	apa102->spi_board = &apa_spi_board_info;
+	apa102->spi_master = spi_master;
+	apa102->spi_device = spi_device;
+
+        apa102->enable_light_effect = true;
+        yodabase_led_draw = extern_apa102_pixel_store;
+        yodabase_is_led_busy = extern_led_busy_show;
+
+        INIT_WORK(&apa102->pixel_work, apa102_pixel_work);
+
+        apa_init_led();
+
+        if(gpio_request_one(POWER, GPIOF_OUT_INIT_HIGH, "power control"))
+        {
+          printk("%s APA102 POWER Not On\n", __func__);
+          return -1;
+         }
+        else
+        printk("%s probe completed successfully!\n", __func__);
+      
+
+	return 0;
+}
+
+static void __exit apaspi_led_exit(void) 
+{
+	struct apa102 *apa102 =&mApa; 
+	spi_unregister_device(apa102->spi_device);
+        gpio_free(POWER);
+}
+
+module_init(apaspi_led_init);
+module_exit(apaspi_led_exit);
+
+
+MODULE_DESCRIPTION("APA102 SPI Driver");
+MODULE_AUTHOR("jiaming.shan@rokid.com");
+MODULE_LICENSE("Dual BSD/GPL");
+MODULE_VERSION(APASPI_VERSION);
diff -Nuar linux-4.9.137-old/drivers/leds/Makefile linux-4.9.137-new/drivers/leds/Makefile
--- linux-4.9.137-old/drivers/leds/Makefile	2018-12-17 14:18:54.790097940 +0800
+++ linux-4.9.137-new/drivers/leds/Makefile	2018-12-17 14:23:58.790103503 +0800
@@ -75,6 +75,9 @@
 # LED SPI Drivers
 obj-$(CONFIG_LEDS_DAC124S085)		+= leds-dac124s085.o
 
+              
+obj-$(CONFIG_LEDS_APA102)		+= leds-apa102.o
+
 # LED Triggers
 obj-$(CONFIG_LEDS_TRIGGERS)		+= trigger/
 obj-$(CONFIG_LEDS_TRIGGER_NETDEV)	+= ledtrig-netdev.o
diff -Nuar linux-4.9.137-old/drivers/staging/Kconfig linux-4.9.137-new/drivers/staging/Kconfig
--- linux-4.9.137-old/drivers/staging/Kconfig	2018-12-17 14:18:55.322097950 +0800
+++ linux-4.9.137-new/drivers/staging/Kconfig	2018-12-17 14:25:01.482104651 +0800
@@ -106,4 +106,6 @@
 
 source "drivers/staging/vc04_services/Kconfig"
 
+source "drivers/staging/yodabase/Kconfig"
+
 endif # STAGING
diff -Nuar linux-4.9.137-old/drivers/staging/Makefile linux-4.9.137-new/drivers/staging/Makefile
--- linux-4.9.137-old/drivers/staging/Makefile	2018-12-17 14:18:55.326097950 +0800
+++ linux-4.9.137-new/drivers/staging/Makefile	2018-12-17 14:24:52.318104483 +0800
@@ -1,6 +1,7 @@
 # Makefile for staging directory
 
 obj-y				+= media/
+obj-y				+= yodabase/
 obj-$(CONFIG_SLICOSS)		+= slicoss/
 obj-$(CONFIG_PRISM2_USB)	+= wlan-ng/
 obj-$(CONFIG_COMEDI)		+= comedi/
diff -Nuar linux-4.9.137-old/drivers/staging/yodabase/Kconfig linux-4.9.137-new/drivers/staging/yodabase/Kconfig
--- linux-4.9.137-old/drivers/staging/yodabase/Kconfig	1970-01-01 08:00:00.000000000 +0800
+++ linux-4.9.137-new/drivers/staging/yodabase/Kconfig	2018-12-17 14:25:18.510104962 +0800
@@ -0,0 +1,10 @@
+#
+# yodabase configuration
+#
+
+config LIGHT_EFFECT
+	tristate "Support light effect"
+	default n
+	help
+		Light on when drive start,and export universal port.
+
diff -Nuar linux-4.9.137-old/drivers/staging/yodabase/light_effect.c linux-4.9.137-new/drivers/staging/yodabase/light_effect.c
--- linux-4.9.137-old/drivers/staging/yodabase/light_effect.c	1970-01-01 08:00:00.000000000 +0800
+++ linux-4.9.137-new/drivers/staging/yodabase/light_effect.c	2018-12-17 14:25:18.510104962 +0800
@@ -0,0 +1,484 @@
+#include <linux/string.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/of_gpio.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/firmware.h>
+#include <linux/platform_device.h>
+#include <linux/workqueue.h>
+#include <linux/slab.h>
+#include <linux/version.h>
+#include <linux/input.h>
+#include <linux/interrupt.h>
+#include <linux/debugfs.h>
+#include <linux/miscdevice.h>
+#include <asm/uaccess.h>
+#include <linux/leds.h>
+
+int (*yodabase_led_draw)(char *buf, int length) = NULL;
+int (*yodabase_is_led_busy)(void) = NULL;
+int (*yodabase_led_brightness_set)(int brightness) = NULL;
+
+#define BREATH_PATTERN 1
+
+struct pattern_st{
+    int pattern_type;
+    int pattern_internal_timems;
+};
+
+struct raw_data_st{
+    int raw_data_internal_timems;
+    int raw_data_length;
+    u8 *raw_data_u8buf;
+};
+
+enum light_status_enum{
+    LIGHT_IDLE,
+    INIT_PATTERN_DATA,
+    INIT_RAW_DATA,
+    OTA_PATTERN_DATA,
+    OTA_RAW_DATA,
+};
+
+struct light {
+    struct platform_device *platform_dev;
+    struct device *dev;
+    int led_num;
+    char *led_charbuf;
+    int led_inter_time;
+    int brightness;
+    struct delayed_work light_delayed_workqueue;
+
+    int light_status;
+    int enable_init_light;
+	int enable_ota_light;
+    struct pattern_st init_pattern_st;
+    struct pattern_st ota_pattern_st;
+    struct raw_data_st init_raw_data_st;
+    struct raw_data_st ota_raw_data_st;
+};
+
+static ssize_t light_pixel_store(struct device *dev, struct device_attribute *attr,
+                const char *buf, size_t count)
+{
+    struct light *light_stage = dev_get_drvdata(dev);
+
+    if(light_stage->light_status != LIGHT_IDLE){
+        //cancel_delayed_work_sync(&light_stage->light_delayed_workqueue);
+        light_stage->light_status = LIGHT_IDLE;
+    }
+
+    if(count != light_stage->led_num){
+        dev_err(dev, "light_pixel_store ERR buf,count(%d) != led_num(%d), buf=%s\n", count,light_stage->led_num, buf);
+        return count;
+    }else{
+        memcpy(light_stage->led_charbuf, buf, count);
+    }
+
+    if(yodabase_led_draw == NULL){
+        dev_err(dev,"%s,yodabase_led_draw is NUll",__func__);
+    }else{
+        (*yodabase_led_draw)(light_stage->led_charbuf,light_stage->led_num);
+    }
+
+    return count;
+}
+
+static ssize_t light_pixel_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+    struct light *light_stage = dev_get_drvdata(dev);
+    memcpy(buf, light_stage->led_charbuf, light_stage->led_num);
+    return 0;
+}
+
+static ssize_t light_busy_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+    int ret = (*yodabase_is_led_busy)();
+    return snprintf(buf, 16, "%u\n", (ret) ? 1 : 0);
+}
+
+static ssize_t light_brightness_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+    struct light *light_stage = dev_get_drvdata(dev);
+    return snprintf(buf, 16, "%u\n", light_stage->brightness);
+}
+
+static ssize_t light_brightness_store(struct device *dev, struct device_attribute *attr,
+                const char *buf, size_t count)
+{
+    struct light *light_stage = dev_get_drvdata(dev);
+    unsigned long state;
+    int ret = kstrtoul(buf, 10, &state);
+    if(ret < 0){
+        dev_err(dev,"%s,buf=%s is not right\n",__func__, buf);
+        return -1;
+    }
+    light_stage->brightness = (int)state;
+    if(yodabase_led_brightness_set == NULL){
+        dev_err(dev,"%s,yodabase_led_brightness_set is NUll",__func__);
+    }else{
+        (*yodabase_led_brightness_set)(light_stage->brightness);
+    }
+    return count;
+}
+
+static ssize_t light_ota_ctl_store(struct device *dev, struct device_attribute *attr,
+                const char *buf, size_t count)
+{
+    struct light *light_stage = dev_get_drvdata(dev);
+    unsigned long state;
+    int ret = kstrtoul(buf, 10, &state);
+    if(ret < 0){
+        dev_err(dev,"%s,buf=%s is not right\n",__func__, buf);
+        return -1;
+    }
+
+    if(state == 0){
+        dev_err(dev,"stop ota light effect\n");
+        light_stage->light_status = LIGHT_IDLE;
+    }else{
+        dev_err(dev,"start ota light effect\n");
+	if (light_stage->enable_ota_light) {
+		if (light_stage->ota_pattern_st.pattern_type > 0)
+			light_stage->light_status = OTA_PATTERN_DATA;
+		else
+			light_stage->light_status = OTA_RAW_DATA;
+	} else {
+		light_stage->light_status = LIGHT_IDLE;
+	}
+
+    }
+
+    return count;
+}
+
+static ssize_t light_ota_ctl_show(struct device *dev, struct device_attribute *attr,
+                char *buf)
+{
+    struct light *light_stage = dev_get_drvdata(dev);
+    int ret;
+    if((light_stage->light_status == OTA_PATTERN_DATA) || light_stage->light_status == OTA_RAW_DATA)
+        ret = 1;
+    else
+        ret = 0;
+    return snprintf(buf, 16, "%u\n", (ret) ? 1 : 0);
+}
+
+static DEVICE_ATTR(pixel, S_IWUSR | S_IRUGO, light_pixel_show, light_pixel_store);
+static DEVICE_ATTR(busy, S_IRUGO, light_busy_show, NULL);
+static DEVICE_ATTR(brightness, S_IWUSR | S_IRUGO, light_brightness_show, light_brightness_store);
+static DEVICE_ATTR(ota_ctl, S_IWUSR | S_IRUGO, light_ota_ctl_show, light_ota_ctl_store);
+
+
+static struct attribute *light_attributes[] = {
+    &dev_attr_pixel.attr,
+    &dev_attr_busy.attr,
+    &dev_attr_brightness.attr,
+    &dev_attr_ota_ctl.attr,
+    NULL
+};
+
+static struct attribute_group light_attribute_group = {
+    .attrs = light_attributes
+};
+
+static u32 bgr_cal(u32 srcRGB, u32 dstRGB, int devision, int seq)
+{
+
+    u8 tmpR, tmpG, tmpB;
+ 	u32 result;
+
+    u8 srcR = (u8)((srcRGB >> 16) & 0xFF);
+    u8 srcG = (u8)((srcRGB >> 8) & 0xFF);
+    u8 srcB = (u8)((srcRGB >> 0) & 0xFF);
+
+    u8 dstR = (u8)((dstRGB >> 16) & 0xFF);
+    u8 dstG = (u8)((dstRGB >> 8) & 0xFF);
+    u8 dstB = (u8)((dstRGB >> 0) & 0xFF);
+
+    tmpR = srcR + (dstR - srcR) * seq / devision;
+    tmpG = srcG + (dstG - srcG) * seq / devision;
+    tmpB = srcB + (dstB - srcB) * seq / devision;
+
+	result = tmpR << 16 | tmpG << 8| tmpB;
+    return result;
+}
+
+static void breath_pattern(struct light *light_stage)
+{
+    const int div = 64;
+    const u32 led_ref[3] = {0xFF0000, 0xCC00FF, 0xFFFFFF};//attention it is bgr, not rgb!
+    int light_num = sizeof(led_ref)/sizeof(led_ref[0]);
+
+    static u32 circle_num = 0,seq = 0;
+    int i;
+
+    seq++;
+    seq = seq % div;
+    if(seq == 0){
+        circle_num++;
+        circle_num = circle_num % light_num;
+    }
+    u32 led_bgr32 = bgr_cal(led_ref[circle_num], led_ref[(circle_num+1)%light_num], div, seq);
+    u8 led_bgr8[3];
+    led_bgr8[0] = (u8)((led_bgr32 >> 0) & 0xFF);
+    led_bgr8[1] = (u8)((led_bgr32 >> 8) & 0xFF);
+    led_bgr8[2] = (u8)((led_bgr32 >> 16) & 0xFF);
+
+    for(i = 0; i<light_stage->led_num; i++){
+        *((light_stage->led_charbuf) + i) = led_bgr8[i%3];
+    }
+}
+
+static void init_raw_data_prepare(struct light *light_stage)
+{
+    static int tick = 0;
+    memcpy(light_stage->led_charbuf, (light_stage->init_raw_data_st.raw_data_u8buf+tick), light_stage->led_num);
+    tick = tick + light_stage->led_num;
+    if(tick == light_stage->init_raw_data_st.raw_data_length)
+        tick = 0;
+}
+
+static void ota_raw_data_prepare(struct light *light_stage)
+{
+    static int tick = 0;
+    memcpy(light_stage->led_charbuf, (light_stage->ota_raw_data_st.raw_data_u8buf+tick), light_stage->led_num);
+    tick = tick + light_stage->led_num;
+    if(tick == light_stage->ota_raw_data_st.raw_data_length)
+        tick = 0;
+}
+
+static void prepare_buf(struct light *light_stage)
+{
+    switch(light_stage->light_status){
+        case LIGHT_IDLE:
+            break;
+        case INIT_PATTERN_DATA:
+            light_stage->led_inter_time = light_stage->init_pattern_st.pattern_internal_timems;
+            breath_pattern(light_stage);
+            break;
+        case OTA_PATTERN_DATA:
+            light_stage->led_inter_time = light_stage->ota_pattern_st.pattern_internal_timems;
+            breath_pattern(light_stage);
+            break;
+        case INIT_RAW_DATA:
+            light_stage->led_inter_time = light_stage->init_raw_data_st.raw_data_internal_timems;
+            init_raw_data_prepare(light_stage);
+            break;
+        case OTA_RAW_DATA:
+            light_stage->led_inter_time = light_stage->ota_raw_data_st.raw_data_internal_timems;
+            ota_raw_data_prepare(light_stage);
+            break;
+        default:
+            break;
+    }
+}
+
+static void light_update_work_func(struct work_struct *work)
+{
+    struct light *light_stage = container_of(work, struct light, light_delayed_workqueue.work);
+    int ret = 0;
+
+    if((yodabase_led_draw != NULL) && (light_stage->light_status != LIGHT_IDLE)){
+        prepare_buf(light_stage);
+        ret = (*yodabase_led_draw)(light_stage->led_charbuf,light_stage->led_num);
+    }
+
+    schedule_delayed_work(&(light_stage->light_delayed_workqueue), msecs_to_jiffies(light_stage->led_inter_time));
+}
+
+static int led_stage_probe(struct platform_device *pdev)
+{
+    struct light *light_stage;
+    int ret;
+    int defalt_internal_timems = 30;
+
+    dev_info(&pdev->dev, "%s enter\n", __func__);
+
+    light_stage = devm_kzalloc(&pdev->dev, sizeof(struct light), GFP_KERNEL);
+    if (!light_stage)
+        return -ENOMEM;
+
+    ret = of_property_read_u32(pdev->dev.of_node, "led_num", &light_stage->led_num);
+    if (ret) {
+        dev_err(&pdev->dev, "%s,read no led_num\n", __func__);
+        return -EINVAL;
+    }
+
+    light_stage->led_charbuf = kzalloc(light_stage->led_num,  GFP_KERNEL);
+    if (light_stage->led_charbuf == NULL)
+        return -ENOMEM;
+
+    ret = of_property_read_u32(pdev->dev.of_node, "enable_init_light", &light_stage->enable_init_light);
+    if (ret) {
+        dev_err(&pdev->dev, "%s,read no enable_init_light\n", __func__);
+        goto free_led_charbuf;
+    }
+
+	ret = of_property_read_u32(pdev->dev.of_node, "enable_ota_light",
+				   &light_stage->enable_ota_light);
+	if (ret) {
+		dev_err(&pdev->dev, "%s,read no enable_ota_light\n", __func__);
+		goto free_led_charbuf;
+	}
+
+    ret = of_property_read_u32(pdev->dev.of_node, "init_pattern_type", &light_stage->init_pattern_st.pattern_type);
+    if (!ret) {
+        ret = of_property_read_u32(pdev->dev.of_node, "init_pattern_inter_timems", \
+                        &light_stage->init_pattern_st.pattern_internal_timems);
+        if (ret) {
+            light_stage->init_pattern_st.pattern_internal_timems = defalt_internal_timems;
+        }
+    }
+
+    ret = of_property_read_u32(pdev->dev.of_node, "ota_pattern_type", &light_stage->ota_pattern_st.pattern_type);
+    if (!ret) {
+        ret = of_property_read_u32(pdev->dev.of_node, "ota_pattern_inter_timems", \
+                        &light_stage->ota_pattern_st.pattern_internal_timems);
+        if (ret) {
+            light_stage->init_pattern_st.pattern_internal_timems = defalt_internal_timems;
+        }
+    }
+
+    ret = of_property_read_u32(pdev->dev.of_node, "init_raw_data_length", &light_stage->init_raw_data_st.raw_data_length);
+    if (!ret) {
+        ret = of_property_read_u32(pdev->dev.of_node, "init_raw_data_inter_timems", \
+                        &light_stage->init_raw_data_st.raw_data_internal_timems);
+        if (ret) {
+            light_stage->init_raw_data_st.raw_data_internal_timems = defalt_internal_timems;
+        }
+        light_stage->init_raw_data_st.raw_data_u8buf = kzalloc(light_stage->init_raw_data_st.raw_data_length,  GFP_KERNEL);
+        if (light_stage->init_raw_data_st.raw_data_u8buf == NULL){
+            dev_err(&pdev->dev, "%s,fail kzalloc raw_data\n", __func__);
+            goto free_led_charbuf;
+        }
+        ret = of_property_read_u8_array(pdev->dev.of_node,  "init_raw_data_u8", \
+                    light_stage->init_raw_data_st.raw_data_u8buf, light_stage->init_raw_data_st.raw_data_length);
+        if(ret){
+            dev_err(&pdev->dev, "%s,fail to read raw_data\n", __func__);
+            goto free_init_raw_data;
+        }
+    }
+
+    ret = of_property_read_u32(pdev->dev.of_node, "ota_raw_data_length", &light_stage->ota_raw_data_st.raw_data_length);
+    if (!ret) {
+        ret = of_property_read_u32(pdev->dev.of_node, "ota_raw_data_inter_timems", \
+                        &light_stage->ota_raw_data_st.raw_data_internal_timems);
+        if (ret) {
+            light_stage->ota_raw_data_st.raw_data_internal_timems = defalt_internal_timems;
+        }
+        light_stage->ota_raw_data_st.raw_data_u8buf = kzalloc(light_stage->ota_raw_data_st.raw_data_length,  GFP_KERNEL);
+        if (light_stage->ota_raw_data_st.raw_data_u8buf == NULL){
+            dev_err(&pdev->dev, "%s,fail kzalloc raw_data\n", __func__);
+            goto free_led_charbuf;
+        }
+        ret = of_property_read_u8_array(pdev->dev.of_node,  "ota_raw_data_u8", \
+                    light_stage->ota_raw_data_st.raw_data_u8buf, light_stage->ota_raw_data_st.raw_data_length);
+        if(ret){
+            dev_err(&pdev->dev, "%s,fail to read raw_data\n", __func__);
+            goto free_ota_raw_data;
+        }
+    }
+
+    switch(light_stage->enable_init_light){
+        case 0:
+            light_stage->light_status = LIGHT_IDLE;
+            break;
+        case 1:
+            light_stage->light_status = INIT_PATTERN_DATA;
+            break;
+        case 2:
+            light_stage->light_status = INIT_RAW_DATA;
+            break;
+        default:
+            light_stage->light_status = LIGHT_IDLE;
+            break;
+    }
+
+    light_stage->led_inter_time = defalt_internal_timems;
+    INIT_DELAYED_WORK(&(light_stage->light_delayed_workqueue),  light_update_work_func);
+    schedule_delayed_work(&(light_stage->light_delayed_workqueue), msecs_to_jiffies(light_stage->led_inter_time));
+
+    light_stage->platform_dev = pdev;
+    light_stage->dev = &pdev->dev;
+    platform_set_drvdata(pdev, light_stage);
+
+    ret = sysfs_create_group(&light_stage->dev->kobj, &light_attribute_group);
+    if (ret) {
+        dev_err(&pdev->dev, "%s,sysfs_create_group fail\n", __func__);
+        goto free_led_charbuf;
+    }
+
+    dev_info(&pdev->dev, "%s probe completed successfully!\n", __func__);
+
+    return 0;
+
+free_ota_raw_data:
+    kfree(light_stage->ota_raw_data_st.raw_data_u8buf);
+free_init_raw_data:
+    kfree(light_stage->init_raw_data_st.raw_data_u8buf);
+free_led_charbuf:
+    kfree(light_stage->led_charbuf);
+
+    return -EINVAL;
+}
+
+static int led_stage_remove(struct platform_device *pdev)
+{
+    struct light *light_stage = platform_get_drvdata(pdev);
+    if(light_stage->enable_init_light){
+        cancel_delayed_work_sync(&light_stage->light_delayed_workqueue);
+    }
+
+    if(light_stage->init_raw_data_st.raw_data_u8buf)
+        kfree(light_stage->init_raw_data_st.raw_data_u8buf);
+    if(light_stage->ota_raw_data_st.raw_data_u8buf)
+        kfree(light_stage->ota_raw_data_st.raw_data_u8buf);
+
+    sysfs_remove_group(&light_stage->dev->kobj, &light_attribute_group); 
+    return 0;
+}
+
+static int led_stage_suspend(struct platform_device *dev,  pm_message_t state)
+{
+    return 0;
+}
+
+static int led_stage_resume(struct platform_device *dev)
+{
+    return 0;
+}
+
+static const struct of_device_id led_dt_match[] = {
+    {   .compatible = "rokid, led-stage", },
+    {},
+};
+
+static struct platform_driver led_stage_driver = {
+    .probe = led_stage_probe,
+    .remove = led_stage_remove,
+    .suspend = led_stage_suspend,
+    .resume = led_stage_resume,
+    .driver = {
+        .name = "led-stage",
+        .of_match_table = led_dt_match,
+    },
+};
+
+static int __init led_stage_init(void)
+{
+    return platform_driver_register(&led_stage_driver);
+}
+
+static void __exit led_stage_exit(void)
+{
+    platform_driver_unregister(&led_stage_driver);
+}
+
+module_init(led_stage_init);
+module_exit(led_stage_exit);
+
+MODULE_AUTHOR("Eric.yang");
+MODULE_DESCRIPTION("Led starge Driver");
+MODULE_LICENSE("GPL");
diff -Nuar linux-4.9.137-old/drivers/staging/yodabase/Makefile linux-4.9.137-new/drivers/staging/yodabase/Makefile
--- linux-4.9.137-old/drivers/staging/yodabase/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ linux-4.9.137-new/drivers/staging/yodabase/Makefile	2018-12-17 14:25:18.510104962 +0800
@@ -0,0 +1,5 @@
+#
+# Makefile for the yodaos.
+#
+
+obj-$(CONFIG_LIGHT_EFFECT) += light_effect.o
diff -Nuar linux-4.9.137-old/include/linux/light_effect.h linux-4.9.137-new/include/linux/light_effect.h
--- linux-4.9.137-old/include/linux/light_effect.h	1970-01-01 08:00:00.000000000 +0800
+++ linux-4.9.137-new/include/linux/light_effect.h	2018-12-17 15:22:32.294167806 +0800
@@ -0,0 +1,8 @@
+#ifndef _LIGHT_EFFECT_H
+#define _LIGHT_EFFECT_H
+
+extern int (*yodabase_led_draw)(char *buf, int length);
+extern int (*yodabase_is_led_busy)(void);
+extern int (*yodabase_led_brightness_set)(int brightness);
+
+#endif /* _LIGHT_EFFECT_H */
\ 文件尾没有 newline 字符
